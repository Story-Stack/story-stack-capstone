generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int        @id @default(autoincrement())
  first_name  String?    @db.VarChar(255)
  last_name   String?    @db.VarChar(255)
  email       String     @unique @db.VarChar(255)
  supabase_id String     @unique @db.VarChar(255)
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  favorites   Favorite[]
  shelf_items ShelfItem[]
  messages    Message[]
  comments    Comment[]
  joined_channels UserChannel[]
  category_scores UserCategoryScore[]
  notifications Notification[]
}

model Favorite {
  id         Int      @id @default(autoincrement())
  user_id    Int
  book_id    String   @db.VarChar(255)
  book_title String   @db.VarChar(500)
  book_data  Json?    // Store complete book data from Google Books API
  created_at DateTime @default(now())

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, book_id])
}

model ShelfItem {
  id         Int      @id @default(autoincrement())
  user_id    Int
  book_id    String   @db.VarChar(255)
  book_title String   @db.VarChar(500)
  book_data  Json?    // Store complete book data from Google Books API
  created_at DateTime @default(now())

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, book_id])
}

model Channel {
  id          String    @id @default(uuid())
  name        String    @db.VarChar(255)
  book_id     String    @db.VarChar(255)  // Google Books API ID
  book_title  String    @db.VarChar(500)
  book_data   Json?     // Store complete book data
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  messages    Message[]
  members     UserChannel[]
  notifications Notification[]
}

model UserChannel {
  id         Int      @id @default(autoincrement())
  user_id    Int
  channel_id String
  joined_at  DateTime @default(now())

  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  channel    Channel  @relation(fields: [channel_id], references: [id], onDelete: Cascade)

  @@unique([user_id, channel_id])
}

model Message {
  id         String   @id @default(uuid())
  content    String
  createdAt  DateTime @default(now())

  // Relations
  user       User     @relation(fields: [userId], references: [id])
  userId     Int      // Changed from String to Int to match User.id

  channel    Channel  @relation(fields: [channelId], references: [id])
  channelId  String

  notifications Notification[]
}

model Comment {
  id          String    @id @default(uuid())
  content     String
  book_id     String    @db.VarChar(255)  // Google Books API ID
  book_title  String    @db.VarChar(500)
  book_data   Json?     // Store complete book data
  createdAt   DateTime  @default(now())

  // Relations
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
}

model UserCategoryScore {
  id         Int      @id @default(autoincrement())
  user_id    Int
  category   String   @db.VarChar(255)
  score      Float    @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, category])
}

model Notification {
  id           String   @id @default(uuid())
  user_id      Int
  channel_id   String
  message_id   String?
  content      String
  is_read      Boolean  @default(false)
  created_at   DateTime @default(now())

  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  channel      Channel  @relation(fields: [channel_id], references: [id], onDelete: Cascade)
  message      Message? @relation(fields: [message_id], references: [id], onDelete: SetNull)
}
